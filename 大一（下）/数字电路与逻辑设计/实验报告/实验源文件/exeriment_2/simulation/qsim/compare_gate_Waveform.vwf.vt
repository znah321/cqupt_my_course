// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/29/2020 19:07:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    compare_gate
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module compare_gate_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input  A;
input  B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module compare_gate_vlg_check_tst (
	AEB,
	AGE,
	ALB,
	sampler_rx
);
input  AEB;
input  AGE;
input  ALB;
input sampler_rx;

reg  AEB_expected;
reg  AGE_expected;
reg  ALB_expected;

reg  AEB_prev;
reg  AGE_prev;
reg  ALB_prev;

reg  AEB_expected_prev;
reg  AGE_expected_prev;
reg  ALB_expected_prev;

reg  last_AEB_exp;
reg  last_AGE_exp;
reg  last_ALB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	AEB_prev = AEB;
	AGE_prev = AGE;
	ALB_prev = ALB;
end

// update expected /o prevs

always @(trigger)
begin
	AEB_expected_prev = AEB_expected;
	AGE_expected_prev = AGE_expected;
	ALB_expected_prev = ALB_expected;
end



// expected AEB
initial
begin
	AEB_expected = 1'bX;
end 

// expected AGE
initial
begin
	AGE_expected = 1'bX;
end 

// expected ALB
initial
begin
	ALB_expected = 1'bX;
end 
// generate trigger
always @(AEB_expected or AEB or AGE_expected or AGE or ALB_expected or ALB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AEB = %b | expected AGE = %b | expected ALB = %b | ",AEB_expected_prev,AGE_expected_prev,ALB_expected_prev);
	$display("| real AEB = %b | real AGE = %b | real ALB = %b | ",AEB_prev,AGE_prev,ALB_prev);
`endif
	if (
		( AEB_expected_prev !== 1'bx ) && ( AEB_prev !== AEB_expected_prev )
		&& ((AEB_expected_prev !== last_AEB_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AEB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AEB_expected_prev);
		$display ("     Real value = %b", AEB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AEB_exp = AEB_expected_prev;
	end
	if (
		( AGE_expected_prev !== 1'bx ) && ( AGE_prev !== AGE_expected_prev )
		&& ((AGE_expected_prev !== last_AGE_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AGE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AGE_expected_prev);
		$display ("     Real value = %b", AGE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AGE_exp = AGE_expected_prev;
	end
	if (
		( ALB_expected_prev !== 1'bx ) && ( ALB_prev !== ALB_expected_prev )
		&& ((ALB_expected_prev !== last_ALB_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALB_expected_prev);
		$display ("     Real value = %b", ALB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALB_exp = ALB_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module compare_gate_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
// wires                                               
wire AEB;
wire AGE;
wire ALB;

wire sampler;                             

// assign statements (if any)                          
compare_gate i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AEB(AEB),
	.AGE(AGE),
	.ALB(ALB),
	.B(B)
);

// A
always
begin
	A = 1'b0;
	A = #250000 1'b1;
	#250000;
end 

// B
always
begin
	B = 1'b0;
	B = #125000 1'b1;
	#125000;
end 

compare_gate_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

compare_gate_vlg_check_tst tb_out(
	.AEB(AEB),
	.AGE(AGE),
	.ALB(ALB),
	.sampler_rx(sampler)
);
endmodule

