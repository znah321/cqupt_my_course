// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2020 15:48:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2_vlg_sample_tst(
	CP,
	sampler_tx
);
input  CP;
output sampler_tx;

reg sample;
time current_time;
always @(CP)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab2_vlg_check_tst (
	Ge,
	Shi,
	sampler_rx
);
input [6:0] Ge;
input [6:0] Shi;
input sampler_rx;

reg [6:0] Ge_expected;
reg [6:0] Shi_expected;

reg [6:0] Ge_prev;
reg [6:0] Shi_prev;

reg [6:0] Ge_expected_prev;
reg [6:0] Shi_expected_prev;

reg [6:0] last_Ge_exp;
reg [6:0] last_Shi_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Ge_prev = Ge;
	Shi_prev = Shi;
end

// update expected /o prevs

always @(trigger)
begin
	Ge_expected_prev = Ge_expected;
	Shi_expected_prev = Shi_expected;
end


// expected Shi[ 6 ]
initial
begin
	Shi_expected[6] = 1'bX;
end 
// expected Shi[ 5 ]
initial
begin
	Shi_expected[5] = 1'bX;
end 
// expected Shi[ 4 ]
initial
begin
	Shi_expected[4] = 1'bX;
end 
// expected Shi[ 3 ]
initial
begin
	Shi_expected[3] = 1'bX;
end 
// expected Shi[ 2 ]
initial
begin
	Shi_expected[2] = 1'bX;
end 
// expected Shi[ 1 ]
initial
begin
	Shi_expected[1] = 1'bX;
end 
// expected Shi[ 0 ]
initial
begin
	Shi_expected[0] = 1'bX;
end 
// expected Ge[ 6 ]
initial
begin
	Ge_expected[6] = 1'bX;
end 
// expected Ge[ 5 ]
initial
begin
	Ge_expected[5] = 1'bX;
end 
// expected Ge[ 4 ]
initial
begin
	Ge_expected[4] = 1'bX;
end 
// expected Ge[ 3 ]
initial
begin
	Ge_expected[3] = 1'bX;
end 
// expected Ge[ 2 ]
initial
begin
	Ge_expected[2] = 1'bX;
end 
// expected Ge[ 1 ]
initial
begin
	Ge_expected[1] = 1'bX;
end 
// expected Ge[ 0 ]
initial
begin
	Ge_expected[0] = 1'bX;
end 
// generate trigger
always @(Ge_expected or Ge or Shi_expected or Shi)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Ge = %b | expected Shi = %b | ",Ge_expected_prev,Shi_expected_prev);
	$display("| real Ge = %b | real Shi = %b | ",Ge_prev,Shi_prev);
`endif
	if (
		( Ge_expected_prev[0] !== 1'bx ) && ( Ge_prev[0] !== Ge_expected_prev[0] )
		&& ((Ge_expected_prev[0] !== last_Ge_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ge[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ge_expected_prev);
		$display ("     Real value = %b", Ge_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ge_exp[0] = Ge_expected_prev[0];
	end
	if (
		( Ge_expected_prev[1] !== 1'bx ) && ( Ge_prev[1] !== Ge_expected_prev[1] )
		&& ((Ge_expected_prev[1] !== last_Ge_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ge[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ge_expected_prev);
		$display ("     Real value = %b", Ge_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ge_exp[1] = Ge_expected_prev[1];
	end
	if (
		( Ge_expected_prev[2] !== 1'bx ) && ( Ge_prev[2] !== Ge_expected_prev[2] )
		&& ((Ge_expected_prev[2] !== last_Ge_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ge[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ge_expected_prev);
		$display ("     Real value = %b", Ge_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ge_exp[2] = Ge_expected_prev[2];
	end
	if (
		( Ge_expected_prev[3] !== 1'bx ) && ( Ge_prev[3] !== Ge_expected_prev[3] )
		&& ((Ge_expected_prev[3] !== last_Ge_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ge[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ge_expected_prev);
		$display ("     Real value = %b", Ge_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ge_exp[3] = Ge_expected_prev[3];
	end
	if (
		( Ge_expected_prev[4] !== 1'bx ) && ( Ge_prev[4] !== Ge_expected_prev[4] )
		&& ((Ge_expected_prev[4] !== last_Ge_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ge[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ge_expected_prev);
		$display ("     Real value = %b", Ge_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ge_exp[4] = Ge_expected_prev[4];
	end
	if (
		( Ge_expected_prev[5] !== 1'bx ) && ( Ge_prev[5] !== Ge_expected_prev[5] )
		&& ((Ge_expected_prev[5] !== last_Ge_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ge[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ge_expected_prev);
		$display ("     Real value = %b", Ge_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ge_exp[5] = Ge_expected_prev[5];
	end
	if (
		( Ge_expected_prev[6] !== 1'bx ) && ( Ge_prev[6] !== Ge_expected_prev[6] )
		&& ((Ge_expected_prev[6] !== last_Ge_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ge[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ge_expected_prev);
		$display ("     Real value = %b", Ge_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ge_exp[6] = Ge_expected_prev[6];
	end
	if (
		( Shi_expected_prev[0] !== 1'bx ) && ( Shi_prev[0] !== Shi_expected_prev[0] )
		&& ((Shi_expected_prev[0] !== last_Shi_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Shi[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Shi_expected_prev);
		$display ("     Real value = %b", Shi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Shi_exp[0] = Shi_expected_prev[0];
	end
	if (
		( Shi_expected_prev[1] !== 1'bx ) && ( Shi_prev[1] !== Shi_expected_prev[1] )
		&& ((Shi_expected_prev[1] !== last_Shi_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Shi[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Shi_expected_prev);
		$display ("     Real value = %b", Shi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Shi_exp[1] = Shi_expected_prev[1];
	end
	if (
		( Shi_expected_prev[2] !== 1'bx ) && ( Shi_prev[2] !== Shi_expected_prev[2] )
		&& ((Shi_expected_prev[2] !== last_Shi_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Shi[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Shi_expected_prev);
		$display ("     Real value = %b", Shi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Shi_exp[2] = Shi_expected_prev[2];
	end
	if (
		( Shi_expected_prev[3] !== 1'bx ) && ( Shi_prev[3] !== Shi_expected_prev[3] )
		&& ((Shi_expected_prev[3] !== last_Shi_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Shi[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Shi_expected_prev);
		$display ("     Real value = %b", Shi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Shi_exp[3] = Shi_expected_prev[3];
	end
	if (
		( Shi_expected_prev[4] !== 1'bx ) && ( Shi_prev[4] !== Shi_expected_prev[4] )
		&& ((Shi_expected_prev[4] !== last_Shi_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Shi[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Shi_expected_prev);
		$display ("     Real value = %b", Shi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Shi_exp[4] = Shi_expected_prev[4];
	end
	if (
		( Shi_expected_prev[5] !== 1'bx ) && ( Shi_prev[5] !== Shi_expected_prev[5] )
		&& ((Shi_expected_prev[5] !== last_Shi_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Shi[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Shi_expected_prev);
		$display ("     Real value = %b", Shi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Shi_exp[5] = Shi_expected_prev[5];
	end
	if (
		( Shi_expected_prev[6] !== 1'bx ) && ( Shi_prev[6] !== Shi_expected_prev[6] )
		&& ((Shi_expected_prev[6] !== last_Shi_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Shi[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Shi_expected_prev);
		$display ("     Real value = %b", Shi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Shi_exp[6] = Shi_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CP;
// wires                                               
wire [6:0] Ge;
wire [6:0] Shi;

wire sampler;                             

// assign statements (if any)                          
lab2 i1 (
// port map - connection between master ports and signals/registers   
	.CP(CP),
	.Ge(Ge),
	.Shi(Shi)
);

// CP
always
begin
	CP = 1'b0;
	CP = #5000 1'b1;
	#5000;
end 

lab2_vlg_sample_tst tb_sample (
	.CP(CP),
	.sampler_tx(sampler)
);

lab2_vlg_check_tst tb_out(
	.Ge(Ge),
	.Shi(Shi),
	.sampler_rx(sampler)
);
endmodule

