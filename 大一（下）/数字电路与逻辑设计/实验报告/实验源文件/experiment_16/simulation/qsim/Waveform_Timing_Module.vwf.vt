// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2020 12:27:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Timing_Module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Timing_Module_vlg_sample_tst(
	Input,
	sampler_tx
);
input  Input;
output sampler_tx;

reg sample;
time current_time;
always @(Input)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Timing_Module_vlg_check_tst (
	H,
	M,
	S,
	sampler_rx
);
input [7:0] H;
input [7:0] M;
input [7:0] S;
input sampler_rx;

reg [7:0] H_expected;
reg [7:0] M_expected;
reg [7:0] S_expected;

reg [7:0] H_prev;
reg [7:0] M_prev;
reg [7:0] S_prev;

reg [7:0] H_expected_prev;
reg [7:0] M_expected_prev;
reg [7:0] S_expected_prev;

reg [7:0] last_H_exp;
reg [7:0] last_M_exp;
reg [7:0] last_S_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	H_prev = H;
	M_prev = M;
	S_prev = S;
end

// update expected /o prevs

always @(trigger)
begin
	H_expected_prev = H_expected;
	M_expected_prev = M_expected;
	S_expected_prev = S_expected;
end



// expected H[7]
initial
begin
	H_expected[7] = 1'bX;
	H_expected[7] = #999000 1'b0;
end 

// expected H[6]
initial
begin
	H_expected[6] = 1'bX;
	H_expected[6] = #999000 1'b0;
end 

// expected H[5]
initial
begin
	H_expected[5] = 1'bX;
	H_expected[5] = #999000 1'b0;
end 

// expected H[4]
initial
begin
	H_expected[4] = 1'bX;
	H_expected[4] = #999000 1'b0;
end 

// expected H[3]
initial
begin
	H_expected[3] = 1'bX;
	H_expected[3] = #999000 1'b0;
end 

// expected H[2]
initial
begin
	H_expected[2] = 1'bX;
	H_expected[2] = #999000 1'b0;
end 

// expected H[1]
initial
begin
	H_expected[1] = 1'bX;
	H_expected[1] = #999000 1'b0;
end 

// expected H[0]
initial
begin
	H_expected[0] = 1'bX;
	H_expected[0] = #999000 1'b0;
end 

// expected M[7]
initial
begin
	M_expected[7] = 1'bX;
	M_expected[7] = #999000 1'b0;
end 

// expected M[6]
initial
begin
	M_expected[6] = 1'bX;
	M_expected[6] = #999000 1'b0;
end 

// expected M[5]
initial
begin
	M_expected[5] = 1'bX;
	M_expected[5] = #999000 1'b0;
end 

// expected M[4]
initial
begin
	M_expected[4] = 1'bX;
	M_expected[4] = #999000 1'b0;
end 

// expected M[3]
initial
begin
	M_expected[3] = 1'bX;
	M_expected[3] = #999000 1'b0;
end 

// expected M[2]
initial
begin
	M_expected[2] = 1'bX;
	M_expected[2] = #999000 1'b0;
end 

// expected M[1]
initial
begin
	M_expected[1] = 1'bX;
	M_expected[1] = #999000 1'b0;
end 

// expected M[0]
initial
begin
	M_expected[0] = 1'bX;
	M_expected[0] = #999000 1'b0;
end 

// expected S[7]
initial
begin
	S_expected[7] = 1'bX;
	S_expected[7] = #999000 1'b0;
end 

// expected S[6]
initial
begin
	S_expected[6] = 1'bX;
	S_expected[6] = #999000 1'b0;
end 

// expected S[5]
initial
begin
	S_expected[5] = 1'bX;
	S_expected[5] = #999000 1'b0;
end 

// expected S[4]
initial
begin
	S_expected[4] = 1'bX;
	S_expected[4] = #999000 1'b0;
end 

// expected S[3]
initial
begin
	S_expected[3] = 1'bX;
	S_expected[3] = #999000 1'b0;
end 

// expected S[2]
initial
begin
	S_expected[2] = 1'bX;
	S_expected[2] = #999000 1'b0;
end 

// expected S[1]
initial
begin
	S_expected[1] = 1'bX;
	S_expected[1] = #999000 1'b0;
end 

// expected S[0]
initial
begin
	S_expected[0] = 1'bX;
	S_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(H_expected or H or M_expected or M or S_expected or S)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected H = %b | expected M = %b | expected S = %b | ",H_expected_prev,M_expected_prev,S_expected_prev);
	$display("| real H = %b | real M = %b | real S = %b | ",H_prev,M_prev,S_prev);
`endif
	if (
		( H_expected_prev[0] !== 1'bx ) && ( H_prev[0] !== H_expected_prev[0] )
		&& ((H_expected_prev[0] !== last_H_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[0] = H_expected_prev[0];
	end
	if (
		( H_expected_prev[1] !== 1'bx ) && ( H_prev[1] !== H_expected_prev[1] )
		&& ((H_expected_prev[1] !== last_H_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[1] = H_expected_prev[1];
	end
	if (
		( H_expected_prev[2] !== 1'bx ) && ( H_prev[2] !== H_expected_prev[2] )
		&& ((H_expected_prev[2] !== last_H_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[2] = H_expected_prev[2];
	end
	if (
		( H_expected_prev[3] !== 1'bx ) && ( H_prev[3] !== H_expected_prev[3] )
		&& ((H_expected_prev[3] !== last_H_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[3] = H_expected_prev[3];
	end
	if (
		( H_expected_prev[4] !== 1'bx ) && ( H_prev[4] !== H_expected_prev[4] )
		&& ((H_expected_prev[4] !== last_H_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[4] = H_expected_prev[4];
	end
	if (
		( H_expected_prev[5] !== 1'bx ) && ( H_prev[5] !== H_expected_prev[5] )
		&& ((H_expected_prev[5] !== last_H_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[5] = H_expected_prev[5];
	end
	if (
		( H_expected_prev[6] !== 1'bx ) && ( H_prev[6] !== H_expected_prev[6] )
		&& ((H_expected_prev[6] !== last_H_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[6] = H_expected_prev[6];
	end
	if (
		( H_expected_prev[7] !== 1'bx ) && ( H_prev[7] !== H_expected_prev[7] )
		&& ((H_expected_prev[7] !== last_H_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[7] = H_expected_prev[7];
	end
	if (
		( M_expected_prev[0] !== 1'bx ) && ( M_prev[0] !== M_expected_prev[0] )
		&& ((M_expected_prev[0] !== last_M_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[0] = M_expected_prev[0];
	end
	if (
		( M_expected_prev[1] !== 1'bx ) && ( M_prev[1] !== M_expected_prev[1] )
		&& ((M_expected_prev[1] !== last_M_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[1] = M_expected_prev[1];
	end
	if (
		( M_expected_prev[2] !== 1'bx ) && ( M_prev[2] !== M_expected_prev[2] )
		&& ((M_expected_prev[2] !== last_M_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[2] = M_expected_prev[2];
	end
	if (
		( M_expected_prev[3] !== 1'bx ) && ( M_prev[3] !== M_expected_prev[3] )
		&& ((M_expected_prev[3] !== last_M_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[3] = M_expected_prev[3];
	end
	if (
		( M_expected_prev[4] !== 1'bx ) && ( M_prev[4] !== M_expected_prev[4] )
		&& ((M_expected_prev[4] !== last_M_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[4] = M_expected_prev[4];
	end
	if (
		( M_expected_prev[5] !== 1'bx ) && ( M_prev[5] !== M_expected_prev[5] )
		&& ((M_expected_prev[5] !== last_M_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[5] = M_expected_prev[5];
	end
	if (
		( M_expected_prev[6] !== 1'bx ) && ( M_prev[6] !== M_expected_prev[6] )
		&& ((M_expected_prev[6] !== last_M_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[6] = M_expected_prev[6];
	end
	if (
		( M_expected_prev[7] !== 1'bx ) && ( M_prev[7] !== M_expected_prev[7] )
		&& ((M_expected_prev[7] !== last_M_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[7] = M_expected_prev[7];
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end
	if (
		( S_expected_prev[6] !== 1'bx ) && ( S_prev[6] !== S_expected_prev[6] )
		&& ((S_expected_prev[6] !== last_S_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[6] = S_expected_prev[6];
	end
	if (
		( S_expected_prev[7] !== 1'bx ) && ( S_prev[7] !== S_expected_prev[7] )
		&& ((S_expected_prev[7] !== last_S_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[7] = S_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Timing_Module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Input;
// wires                                               
wire [7:0] H;
wire [7:0] M;
wire [7:0] S;

wire sampler;                             

// assign statements (if any)                          
Timing_Module i1 (
// port map - connection between master ports and signals/registers   
	.H(H),
	.\Input (Input),
	.M(M),
	.S(S)
);

// Input
always
begin
	Input = 1'b0;
	Input = #2500 1'b1;
	#2500;
end 

Timing_Module_vlg_sample_tst tb_sample (
	.Input(Input),
	.sampler_tx(sampler)
);

Timing_Module_vlg_check_tst tb_out(
	.H(H),
	.M(M),
	.S(S),
	.sampler_rx(sampler)
);
endmodule

