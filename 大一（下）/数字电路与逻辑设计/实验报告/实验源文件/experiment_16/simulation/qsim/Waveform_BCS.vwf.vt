// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2020 17:46:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Buzzer_Clock_Simulation
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Buzzer_Clock_Simulation_vlg_sample_tst(
	Clock,
	Set_H,
	Set_M,
	Set_S,
	ST,
	sampler_tx
);
input  Clock;
input [7:0] Set_H;
input [7:0] Set_M;
input [7:0] Set_S;
input  ST;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or Set_H or Set_M or Set_S or ST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Buzzer_Clock_Simulation_vlg_check_tst (
	Buzzer,
	sampler_rx
);
input  Buzzer;
input sampler_rx;

reg  Buzzer_expected;

reg  Buzzer_prev;

reg  Buzzer_expected_prev;

reg  last_Buzzer_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Buzzer_prev = Buzzer;
end

// update expected /o prevs

always @(trigger)
begin
	Buzzer_expected_prev = Buzzer_expected;
end



// expected Buzzer
initial
begin
	Buzzer_expected = 1'bX;
	Buzzer_expected = #999000 1'b0;
end 
// generate trigger
always @(Buzzer_expected or Buzzer)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Buzzer = %b | ",Buzzer_expected_prev);
	$display("| real Buzzer = %b | ",Buzzer_prev);
`endif
	if (
		( Buzzer_expected_prev !== 1'bx ) && ( Buzzer_prev !== Buzzer_expected_prev )
		&& ((Buzzer_expected_prev !== last_Buzzer_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Buzzer :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Buzzer_expected_prev);
		$display ("     Real value = %b", Buzzer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Buzzer_exp = Buzzer_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Buzzer_Clock_Simulation_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [7:0] Set_H;
reg [7:0] Set_M;
reg [7:0] Set_S;
reg ST;
// wires                                               
wire Buzzer;

wire sampler;                             

// assign statements (if any)                          
Buzzer_Clock_Simulation i1 (
// port map - connection between master ports and signals/registers   
	.Buzzer(Buzzer),
	.Clock(Clock),
	.Set_H(Set_H),
	.Set_M(Set_M),
	.Set_S(Set_S),
	.ST(ST)
);

// ST
initial
begin
	ST = 1'b1;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #5000 1'b1;
	#5000;
end 

// Set_H[7]
initial
begin
	Set_H[7] = 1'b0;
end 

// Set_H[6]
initial
begin
	Set_H[6] = 1'b0;
end 

// Set_H[5]
initial
begin
	Set_H[5] = 1'b0;
end 

// Set_H[4]
initial
begin
	Set_H[4] = 1'b0;
end 

// Set_H[3]
initial
begin
	Set_H[3] = 1'b0;
end 

// Set_H[2]
initial
begin
	Set_H[2] = 1'b0;
end 

// Set_H[1]
initial
begin
	Set_H[1] = 1'b0;
end 

// Set_H[0]
initial
begin
	Set_H[0] = 1'b0;
end 

// Set_M[3]
initial
begin
	Set_M[3] = 1'b0;
end 

// Set_M[2]
initial
begin
	Set_M[2] = 1'b0;
end 

// Set_M[1]
initial
begin
	Set_M[1] = 1'b0;
end 

// Set_M[0]
initial
begin
	Set_M[0] = 1'b0;
end 

// Set_M[7]
initial
begin
	Set_M[7] = 1'b0;
end 

// Set_M[6]
initial
begin
	Set_M[6] = 1'b0;
end 

// Set_M[5]
initial
begin
	Set_M[5] = 1'b0;
end 

// Set_M[4]
initial
begin
	Set_M[4] = 1'b0;
end 

// Set_S[3]
initial
begin
	Set_S[3] = 1'b0;
end 

// Set_S[2]
initial
begin
	Set_S[2] = 1'b0;
end 

// Set_S[1]
initial
begin
	Set_S[1] = 1'b0;
end 

// Set_S[0]
initial
begin
	Set_S[0] = 1'b0;
end 

// Set_S[7]
initial
begin
	Set_S[7] = 1'b0;
end 

// Set_S[6]
initial
begin
	Set_S[6] = 1'b0;
end 

// Set_S[5]
initial
begin
	Set_S[5] = 1'b1;
end 

// Set_S[4]
initial
begin
	Set_S[4] = 1'b0;
end 

Buzzer_Clock_Simulation_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.Set_H(Set_H),
	.Set_M(Set_M),
	.Set_S(Set_S),
	.ST(ST),
	.sampler_tx(sampler)
);

Buzzer_Clock_Simulation_vlg_check_tst tb_out(
	.Buzzer(Buzzer),
	.sampler_rx(sampler)
);
endmodule

